- name: find instances
  hosts: localhost
  gather_facts: true
  vars:
    regions:
      - ap-south-1
      - ap-southeast-1
      - ca-central-1
      - eu-west-1
      - eu-west-3
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2

    states:
      - running
      - shutting-down
    threshold: 86400 # 1 day in seconds

  tasks:
  - name: gather info on EC2 instances
    ec2_instance_facts:
      region: "{{ item }}"
      filters:
        instance-state-name: "{{ states }}"
    with_items: "{{ regions }}"
    register: ec2_info

  - name: combine results into a single list
    set_fact:
      ec2_instances: "{{ ec2_instances | default([]) + item.instances }}"
    with_items: "{{ ec2_info.results }}"

  - name: calculate how many days each instance has been running
    set_fact:
      running_seconds: "{{ (running_seconds | default([])) + [(ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S') - item.launch_time[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')).total_seconds()] }}"
    with_items: "{{ ec2_instances }}"

  - name: Get list of running instances
    set_fact:
      ec2_running_instances: "{{ ec2_running_instances | default([]) + [{'id': item.0.instance_id, 'name': item.0.tags.Name | default(''), 'region': item.0.placement['availability_zone'][:-1], 'builder': item.0.tags.build_user_id | default('') }] }}"
    when:
      - item.1 > threshold
      - item.0.tags.Purpose is not defined or item.0.tags.Purpose != 'Elasticsearch' # e.g. ignoring Elasticserach instances
      - item.0.tags.Role is not defined or item.0.tags.Role != 'jenkins'  # ignoring jenkins instances
      - item.0.tags.environment is not defined or item.0.tags.environment != 'dev'  # ignore dev environments
      - item.0.tags.Environment is not defined or item.0.tags.Environment != 'dev'  # ignore dev Environments
      - item.0.tags.Name is not defined or item.0.tags.Name != 'dev'  # ignore dev Environments
      - item.0.tags.Name is not defined or item.0.tags.Name != 'solution'  # ignore dev Environments
      - item.0.tags.Name is not defined or item.0.tags.Name != 'Kibana'  # ignore Kibana instances
    with_together:
      - "{{ ec2_instances }}"
      - "{{ running_seconds }}"

  - name: print instances for ec2 running instances
    debug:
      msg: "show {{ item.tags.Name | default('') }}"
    with_items: "{{ ec2_running_instances }}"
